version: '3.1'

volumes:
    prometheus_data: {}
    grafana_data: {}
    portainer_data: {}

networks:
  telemessage:
    external: true

services:
#  kafka-monitor:
#    container_name: kafka-monitor
#    image: grinfeld/kafka-monitor
#    depends_on:
#      - prometheus
#    volumes:
#      - $PWD/kafka-monitor/kafka-monitor.properties:/opt/kafka-monitor/config/kafka-monitor.properties
#      - $PWD/jmx_exporter/config.yml:/opt/jmx_exporter/config.yml
#      - $PWD/kafka-prometheus/libs/jmx_prometheus_javaagent-0.10.jar:/opt/jmx_exporter/jmx_prometheus_javaagent-0.10.jar
#    entrypoint:
#      - /opt/kafka-monitor/bin/kafka-monitor-start.sh
#      - /opt/kafka-monitor/config/kafka-monitor.properties
#      - '-javaagent:/opt/jmx_exporter/jmx_prometheus_javaagent-0.10.jar=5559:/opt/jmx_exporter/config.yml'
#    ports:
#      - 8000:8000
#      - 8778:8778
#      - 5559:5559
#    networks:
#      - kafka
#    restart: always

  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.1.0
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9090:9090
    links:
      - kafka-exporter
    networks:
      - default
    depends_on:
      - portainer
      - kafka-exporter
    restart: always

  grafana:
    container_name: grafana
    image: grafana/grafana
    depends_on:
      - portainer
      - prometheus
    ports:
     - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/config.monitoring
    networks:
      - default
    restart: always
  
  kafka-exporter:
    container_name: kafka-exporter
    image: danielqsj/kafka-exporter:latest
    ports:
      - 9308:9308
    entrypoint:
        - /bin/kafka_exporter
        - --kafka.server=kafka-1:9092
        - --kafka.server=kafka-2:29092
        - --kafka.server=kafka-3:39092
    links:
      - kafka-1
      - kafka-2
      - kafka-3
    networks:
      - default
    depends_on:
      - portainer
      - kafka-1
      - kafka-2
      - kafka-3
    restart: always
 
  zookeeper-1:
    container_name: zookeeper-1
    image: confluentinc/cp-zookeeper:latest
    ports:
     - 22181:22181 
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 22181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zookeeper-1:22888:23888;zookeeper-2:32888:33888;zookeeper-3:42888:43888
    depends_on:
      - portainer
    networks:
      - default

  zookeeper-2:
    container_name: zookeeper-2
    image: confluentinc/cp-zookeeper:latest
    ports:
     - 32181:32181
    environment:
      ZOOKEEPER_SERVER_ID: 2
      ZOOKEEPER_CLIENT_PORT: 32181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zookeeper-1:22888:23888;zookeeper-2:32888:33888;zookeeper-3:42888:43888
    depends_on:
      - portainer
    networks:
      - default

  zookeeper-3:
    container_name: zookeeper-3
    image: confluentinc/cp-zookeeper:latest
    ports:
     - 42181:42181
    environment:
      ZOOKEEPER_SERVER_ID: 3
      ZOOKEEPER_CLIENT_PORT: 42181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zookeeper-1:22888:23888;zookeeper-2:32888:33888;zookeeper-3:42888:43888
    depends_on:
      - portainer
    networks:
      - default
  
  kafka-1:
    container_name: kafka-1
    hostname: kafka-1
    ports:
     - 9092:9092
     - 5556:5556
    build: ./kafka-prometheus
    volumes:
      - $PWD/jmx_exporter/config.yml:/opt/jmx_exporter/config.yml
    links:
      - zookeeper-1
      - zookeeper-2
      - zookeeper-3
    depends_on:
      - portainer
      - zookeeper-1
      - zookeeper-2
      - zookeeper-3
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:22181,zookeeper-2:32181,zookeeper-3:42181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:9092
      #KAFKA_MIN_INSYNC_REPLICAS: 1
      #KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      #KAFKA_REPLICATION_FACTOR: 2
      EXTRA_ARGS: "-javaagent:/usr/local/share/jars/jmx_prometheus_javaagent-0.10.jar=5556:/opt/jmx_exporter/config.yml "
    networks:
      - default

  kafka-2:
    container_name: kafka-2
    hostname: kafka-2
    ports:
     - 29092:29092
     - 5557:5557
    build: ./kafka-prometheus
    volumes:
      - $PWD/jmx_exporter/config.yml:/opt/jmx_exporter/config.yml
    links:
      - zookeeper-1
      - zookeeper-2
      - zookeeper-3
    depends_on:
      - portainer
      - zookeeper-1
      - zookeeper-2
      - zookeeper-3
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:22181,zookeeper-2:32181,zookeeper-3:42181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:29092
      #KAFKA_MIN_INSYNC_REPLICAS: 1
      #KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      #KAFKA_REPLICATION_FACTOR: 2
      EXTRA_ARGS: "-javaagent:/usr/local/share/jars/jmx_prometheus_javaagent-0.10.jar=5557:/opt/jmx_exporter/config.yml "
    networks:
      - default

  kafka-3:
    container_name: kafka-3
    hostname: kafka-3
    ports:
     - 39092:39092
     - 5558:5558
    build: ./kafka-prometheus
    volumes:
      - $PWD/jmx_exporter/config.yml:/opt/jmx_exporter/config.yml
    links:
      - zookeeper-1
      - zookeeper-2
      - zookeeper-3
    depends_on:
      - portainer
      - zookeeper-1
      - zookeeper-2
      - zookeeper-3
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:22181,zookeeper-2:32181,zookeeper-3:42181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-3:39092
      #KAFKA_MIN_INSYNC_REPLICAS: 1
      #KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      #KAFKA_REPLICATION_FACTOR: 2
      EXTRA_ARGS: "-javaagent:/usr/local/share/jars/jmx_prometheus_javaagent-0.10.jar=5558:/opt/jmx_exporter/config.yml "
    networks:
      - default

  portainer:
    image: portainer/portainer
    container_name: "portainer-app"
    ports:
      - 9000:9000
    volumes:
      - portainer_data:/data portainer/portainer
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - default

  storage:
    image: openzipkin/zipkin-mysql
    container_name: mysql
    networks:
      - default

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    # Environment settings are defined here https://github.com/openzipkin/zipkin/tree/1.19.0/zipkin-server#environment-variables
    environment:
      - STORAGE_TYPE=mysql
      # Point the zipkin at the storage backend
      - MYSQL_HOST=mysql
      - KAFKA_BOOTSTRAP_SERVERS=kafka-1:9092
    ports:
      - 9411:9411
    depends_on:
      - storage
      - kafka-1
    networks:
      - default

  debezium-connect:
    build: ./debezium
    container_name: debezium-connect
    environment:
      - CONFIG_STORAGE_TOPIC=my-connect-configs
      - GROUP_ID=1
      - OFFSET_STORAGE_TOPIC=my-connect-offsets
      - CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE=false
      - CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE=false
      #- ADVERTISED_HOST_NAME=$(echo $DOCKER_HOST | cut -f3  -d'/' | cut -f1 -d':')
      - BOOTSTRAP_SERVERS=kafka-1:9092
    ports:
      - 8083:8083
    networks:
      - default
      - telemessage

  ksql-server:
    image: "confluentinc/cp-ksql-server:5.2.1"
    environment:
      KSQL_BOOTSTRAP_SERVERS: kafka-1:9092
      KSQL_LISTENERS: http://0.0.0.0:8088
    networks:
      - default
      - telemessage


  cp-kafka-connect:
    image: confluentinc/kafka-connect-datagen:latest
    build: ./cp-kafka-connect
    container_name: kafka-connect
    hostname: connect
    ports:
      - "8084:8084"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'kafka-1:9092'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8084
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLED: "false"
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLED: "false"
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_ZOOKEEPER_CONNECT: 'zookeeper-1:22181'
      # Assumes image is based on confluentinc/kafka-connect-datagen:latest which is pulling 5.1.1 Connect image
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-5.2.1.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
    command: "bash -c 'if [ ! -d /usr/share/confluent-hub-components/confluentinc-kafka-connect-datagen ]; then echo \"WARNING: Did not find directory for kafka-connect-datagen (did you remember to run: docker-compose up -d --build ?)\"; fi ; /etc/confluent/docker/run'"
    networks:
      - default
      - telemessage

